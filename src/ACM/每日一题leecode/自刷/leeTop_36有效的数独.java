package ACM.每日一题leecode.自刷;

import java.lang.reflect.Array;
import java.util.Arrays;

public class leeTop_36有效的数独 {
    /***
     判断一个 9x9 的数独是否有效。只需要根据以下规则，验证已经填入的数字是否有效即可。
     数字 1-9 在每一行只能出现一次。
     数字 1-9 在每一列只能出现一次。
     数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。
     */
    //方法一:暴力验证 行 列 3*3   100 99
    public static boolean isValidSudoku(char[][] board) {
        //直接定义一个set来判断是否重复
        //定义一个9length数组,用来判断重复
        int judge1[] = new int[9];
        int judge2[] = new int[9];
        Arrays.fill(judge1,1);
        Arrays.fill(judge2,1);
        //判断每行 && 每列的数据是否是不重复的
        for (int i = 0; i < 9; i++) {
            Arrays.fill(judge1,1);//判断完之后,重新fill
            Arrays.fill(judge2,1);
            for (int j = 0; j < 9; j++) {
                char c = board[i][j];
                if (c != '.'){
                    int index = c-'1';
                    if (judge1[index]==0)return false;
                    judge1[index]=0;
                }
                char c2 = board[j][i];
                if (c2 != '.'){
                    int index = c2-'1';
                    if (judge2[index]==0)return false;
                    judge2[index]=0;
                }
            }
        }

        //判断3*3方格没有重复
        for (int i = 0; i < 7; i+=3) {
            for (int j = 0; j < 7; j+=3) {
                //判断每一个从i-i+3 j-j+3的方格
                Arrays.fill(judge1,1);
                for (int k = i; k < i + 3; k++) {
                    for (int l = j; l < j + 3; l++) {
                        char c = board[k][l];
                        if (c != '.'){
                            int index = c-'1';
                            if (judge1[index]==0){
                                //System.out.println("这是重复的地方的ij"+k+"--"+l+"---"+c+"---"+index);
                                return false;
                            }
                            judge1[index]=0;
                        }
                    }
                }
            }
        }

        return true;
    }

    public static void main(String[] args) {
        System.out.println(isValidSudoku(new char[][]{
                {'5', '3', '.', '.', '7', '.', '.', '.', '.'},
                {'6', '.', '.', '1', '9', '5', '.', '.', '.'},
                {'.', '9', '8', '.', '.', '.', '.', '6', '.'},
                {'8', '.', '.', '.', '6', '.', '.', '.', '3'},
                {'4', '.', '.', '8', '.', '3', '.', '.', '1'},
                {'7', '.', '.', '.', '2', '.', '.', '.', '6'},
                {'.', '6', '.', '.', '.', '.', '2', '8', '.'},
                {'.', '.', '.', '4', '1', '9', '.', '.', '5'},
                {'.', '.', '.', '.', '8', '.', '.', '7', '9'}}));
        System.out.println(isValidSudoku(new char[][]{
                {'5', '3', '.', '.', '7', '.', '.', '.', '.'},
                {'6', '.', '.', '1', '9', '5', '.', '.', '.'},
                {'.', '9', '8', '.', '.', '.', '.', '6', '.'},
                {'8', '.', '.', '.', '6', '.', '.', '.', '3'},
                {'4', '.', '.', '8', '.', '3', '.', '.', '1'},
                {'7', '.', '.', '.', '2', '.', '.', '.', '6'},
                {'.', '6', '.', '.', '.', '.', '2', '8', '.'},
                {'.', '.', '.', '4', '1', '9', '.', '.', '5'},
                {'.', '.', '6', '.', '8', '.', '.', '7', '9'}}));
        System.out.println(isValidSudoku(new char[][]{
                {'8', '3', '.', '.', '7', '.', '.', '.', '.'},
                {'6', '.', '.', '1', '9', '5', '.', '.', '.'},
                {'.', '9', '8', '.', '.', '.', '.', '6', '.'},
                {'8', '.', '.', '.', '6', '.', '.', '.', '3'},
                {'4', '.', '.', '8', '.', '3', '.', '.', '1'},
                {'7', '.', '.', '.', '2', '.', '.', '.', '6'},
                {'.', '6', '.', '.', '.', '.', '2', '8', '.'},
                {'.', '.', '.', '4', '1', '9', '.', '.', '5'},
                {'.', '.', '.', '.', '8', '.', '.', '7', '9'}}));
    }
}
